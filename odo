#!/bin/bash

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to open browser
open_browser() {
    sleep 2  # Give the server a moment to start
    if [[ "$OSTYPE" == "darwin"* ]]; then
        open "http://localhost:3002/"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        xdg-open "http://localhost:3002/"
    elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
        start "http://localhost:3002/"
    fi
}

# Check if Docker is installed
if ! command_exists docker; then
    echo "Error: Docker is not installed. Please install Docker first."
    exit 1
fi

# Check if Docker Compose is installed
if ! command_exists docker-compose; then
    echo "Error: Docker Compose is not installed. Please install Docker Compose first."
    exit 1
fi

# Check if container is running
check_container_running() {
    if ! docker ps | grep -q "interview-core"; then
        echo "Error: Container 'interview-core' is not running. Please start the containers with 'odo start' first."
        exit 1
    fi
}

case "$1" in
    "start")
        docker-compose up -d
        ;;
    "stop")
        docker-compose down
        ;;
    "update")
        docker-compose up -d --build
        ;;
    "run")
        docker-compose up
        ;;
    "init")
        check_container_running
        docker cp core/data/rfps.csv interview-core:/app/rfps.csv
        docker exec -i interview-core python manage.py import_rfps rfps.csv
        if [ $? -eq 0 ]; then
            echo "Setup completed successfully!"
        else
            echo "Error: Setup failed. Please check the container logs for more details."
            exit 1
        fi
        ;;
    "open")
        open_browser
        ;;
    "manage")
        check_container_running
        docker exec -i interview-core bash -c "python manage.py ${@:2}"
        ;;
    "tests")
        check_container_running
        echo "Running RFP tests..."
        docker exec -i interview-core bash -c "pytest"
        ;;
    "types")
        check_container_running
        echo -n "Generating OpenAPI schema..."
        docker exec interview-core bash -c "python manage.py generate_swagger -o schema.json"
        if [ $? -eq 0 ]; then
            echo "done"
        else
            echo "error:"
            echo "Failed to generate schema. Please check the container logs for more details."
            exit 1
        fi

        echo -n "Copying schema from core..."
        docker cp interview-core:/app/schema.json ./frontend/schema.json > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            echo "done"
        else
            echo "error:"
            echo "Failed to copy schema. Please check the container logs for more details."
            exit 1
        fi

        echo -n "Copying schema to frontend..."
        docker cp ./frontend/schema.json interview-frontend:/app/schema.json > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            echo "done"
        else
            echo "error:"
            echo "Failed to copy schema. Please check the container logs for more details."
            exit 1
        fi

        echo -n "Generating TypeScript types..."
        docker exec interview-frontend sh -c "npm run types"
        if [ $? -eq 0 ]; then
            echo "done"
        else
            echo "error:"
            echo "Failed to generate types. Please check the container logs for more details."
            exit 1
        fi

        echo "TypeScript types generated successfully!"
        ;;
    *)
        echo "Usage: ./odo [command]"
        echo "Commands:"
        echo "  start    - Start containers in detached mode"
        echo "  stop     - Stop containers"
        echo "  update   - Update and restart containers"
        echo "  run      - Start containers and show logs"
        echo "  init     - Import RFP data and initialize the database"
        echo "  open     - Open the application in your default browser"
        echo "  manage   - Run Django management commands"
        echo "  tests    - Run RFP tests"
        echo "  types    - Generate TypeScript types for the frontend"
        exit 1
        ;;
esac 